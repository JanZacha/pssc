/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PSSC_CONFIG_H
#define PSSC_CONFIG_H

#define VERSION "0.2.0"

#include "standardlibs.h"
#include "NamedFormat.h"
#include "HydrogenBond.h"
#include <boost/program_options.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/copy.hpp>
#include <fstream>

namespace io = boost::iostreams;
using std::ifstream;
using std::ios_base;

enum class pssc_output_format {COL, DSSP, TAB, JSON};

struct PSSC_config
{
    PSSC_config(int argc, char* argv[]);
    int _status = 0;
    bool _exit = false;
    string _what = "";

    string input;
    bool verbose = false;
    bool debug = false;
    double max_HBond_energy;
    pssc_output_format output_format;
    string hbond_efunc_descr;
    hbond_energy_callback_function hbond_efunc = nullptr;

private:

    int handle_error(string what, int status=-1)
    {
        _exit = true;
        _what = what;
        return _status = status;
    }

    inline friend std::ostream& operator<<(std::ostream &output, const PSSC_config &config)
    {
        output << "PSSC vers. " << VERSION << std::endl;
        output << "file: " << config.input << std::endl;

        return output;
    }

};

#endif // PSSC_CONFIG_H
